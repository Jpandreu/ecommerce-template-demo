/* ==========================================================================
   Ecommerce Template - Cart & Checkout Bundle
   Consolidated: cart.js, checkout.js, checkout-mobile-menu.js
   ========================================================================== */

// Function to handle images without flickering
function preloadImage(src, fallbackSrc = './assets/images/placeholder.jpg') {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => resolve(src);
        img.onerror = () => resolve(fallbackSrc);
        img.src = src;
    });
}

// CART.JS CONTENT
class CartManager {
    constructor() {
        this.cart = this.loadCart();
        this.debounceTimer = null;
        this.init();
    }
    
    // Helper function to convert price strings to numbers
    parsePrice(price) {
        if (typeof price === 'number') return price;
        if (typeof price === 'string') {
            return parseFloat(price.replace('$', '').replace(',', ''));
        }
        return 0;
    }

    init() {
        this.updateCartItemsData();
        this.renderCart();
        this.attachMainEventListeners();
        this.updateCartCount();
        this.loadRecommendedProducts();
    }

    // Load cart from localStorage
    loadCart() {
        const savedCart = localStorage.getItem('shopping-cart');
        return savedCart ? JSON.parse(savedCart) : [];
    }

    // Save cart to localStorage
    saveCart() {
        localStorage.setItem('shopping-cart', JSON.stringify(this.cart));
        this.updateCartCount();
    }

    // Add item to cart
    addToCart(productId, quantity = 1) {
        console.log(`Adding to cart: ${productId} x ${quantity}`);
        
        const existingItem = this.cart.find(item => item.id === productId);
        
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            const productData = this.getProductData(productId);
            if (productData) {
                this.cart.push({
                    id: productId,
                    name: productData.name,
                    price: productData.price,
                    originalPrice: productData.originalPrice,
                    image: productData.image,
                    quantity: quantity
                });
            } else {
                console.error(`Product data not found for ID: ${productId}`);
                return false;
            }
        }
        
        this.saveCart();
        this.renderCart();
        
        // Trigger analytics event
        if (window.ecommerceAnalytics) {
            window.ecommerceAnalytics.trackAddToCart([{
                item_id: productId,
                item_name: this.getProductData(productId)?.name,
                price: this.getProductData(productId)?.price,
                quantity: quantity
            }]);
        }
        
        return true;
    }

    // Remove item from cart
    removeFromCart(productId) {
        console.log(`Removing from cart: ${productId}`);
        this.cart = this.cart.filter(item => item.id !== productId);
        this.saveCart();
        this.renderCart();
    }

    // Update item quantity
    updateQuantity(productId, newQuantity) {
        console.log(`Updating quantity for ${productId}: ${newQuantity}`);
        
        if (newQuantity <= 0) {
            this.removeFromCart(productId);
            return;
        }
        
        const item = this.cart.find(item => item.id === productId);
        if (item) {
            item.quantity = newQuantity;
            this.saveCart();
            this.renderCart();
        }
    }

    // Get product data
    getProductData(productId) {
        const productElement = document.querySelector(`[data-product-id="${productId}"]`);
        if (!productElement) {
            console.error(`Product element not found for ID: ${productId}`);
            return null;
        }

        return {
            id: productId,
            name: productElement.dataset.productName || productElement.querySelector('.product-title')?.textContent || 'Unknown Product',
            price: this.parsePrice(productElement.dataset.productPrice || productElement.querySelector('.product-price')?.textContent || '0'),
            originalPrice: this.parsePrice(productElement.dataset.productOriginalPrice || '0'),
            image: productElement.dataset.productImage || productElement.querySelector('img')?.src || './assets/images/placeholder.jpg'
        };
    }

    // Update cart items with latest data
    updateCartItemsData() {
        this.cart.forEach(item => {
            const currentData = this.getProductData(item.id);
            if (currentData) {
                item.name = currentData.name;
                item.price = currentData.price;
                item.originalPrice = currentData.originalPrice;
                item.image = currentData.image;
            }
        });
    }

    // Calculate totals
    calculateTotals() {
        const subtotal = this.cart.reduce((total, item) => total + (item.price * item.quantity), 0);
        const shipping = subtotal > 50 ? 0 : 9.99;
        const tax = subtotal * 0.08;
        const total = subtotal + shipping + tax;

        return {
            subtotal: subtotal,
            shipping: shipping,
            tax: tax,
            total: total,
            itemCount: this.cart.reduce((total, item) => total + item.quantity, 0)
        };
    }

    // Render cart
    async renderCart() {
        const cartContainer = document.getElementById('cart-items');
        const totalsContainer = document.querySelector('.cart-totals');
        
        if (!cartContainer) return;

        if (this.cart.length === 0) {
            cartContainer.innerHTML = `
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart"></i>
                    <h3>Your cart is empty</h3>
                    <p>Add some products to get started!</p>
                    <a href="products.html" class="btn btn-primary">Browse Products</a>
                </div>
            `;
            if (totalsContainer) totalsContainer.style.display = 'none';
            return;
        }

        if (totalsContainer) totalsContainer.style.display = 'block';

        let cartHTML = '';
        for (const item of this.cart) {
            const optimizedImageSrc = await preloadImage(item.image);
            
            cartHTML += `
                <div class="cart-item" data-product-id="${item.id}">
                    <div class="cart-item-image">
                        <img src="${optimizedImageSrc}" alt="${item.name}" loading="lazy">
                    </div>
                    <div class="cart-item-details">
                        <h3 class="cart-item-name">${item.name}</h3>
                        <div class="cart-item-price">
                            ${item.originalPrice && item.originalPrice > item.price ? 
                                `<span class="original-price">$${item.originalPrice.toFixed(2)}</span>` : ''
                            }
                            <span class="current-price">$${item.price.toFixed(2)}</span>
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <div class="quantity-controls">
                            <button class="qty-btn minus" data-product-id="${item.id}">-</button>
                            <input type="number" class="qty-input" value="${item.quantity}" min="1" data-product-id="${item.id}">
                            <button class="qty-btn plus" data-product-id="${item.id}">+</button>
                        </div>
                        <button class="remove-btn" data-product-id="${item.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        }

        cartContainer.innerHTML = cartHTML;
        this.attachCartEventListeners();
        this.updateTotals();
    }

    // Attach event listeners for cart interactions
    attachCartEventListeners() {
        // Quantity controls
        document.querySelectorAll('.qty-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = e.target.dataset.productId;
                const item = this.cart.find(item => item.id === productId);
                
                if (item) {
                    if (e.target.classList.contains('minus')) {
                        this.updateQuantity(productId, Math.max(1, item.quantity - 1));
                    } else {
                        this.updateQuantity(productId, item.quantity + 1);
                    }
                }
            });
        });

        // Quantity inputs
        document.querySelectorAll('.qty-input').forEach(input => {
            input.addEventListener('change', (e) => {
                const productId = e.target.dataset.productId;
                const newQuantity = parseInt(e.target.value);
                
                if (newQuantity > 0) {
                    this.updateQuantity(productId, newQuantity);
                }
            });
        });

        // Remove buttons
        document.querySelectorAll('.remove-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = e.target.dataset.productId || e.target.parentElement.dataset.productId;
                this.removeFromCart(productId);
            });
        });
    }

    // Attach main event listeners
    attachMainEventListeners() {
        // Add to cart buttons
        document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const productId = e.target.dataset.productId;
                const quantity = parseInt(e.target.dataset.quantity || '1');
                
                if (this.addToCart(productId, quantity)) {
                    this.showNotification('Product added to cart!', 'success');
                }
            });
        });
    }

    // Update totals display
    updateTotals() {
        const totals = this.calculateTotals();
        const totalsContainer = document.querySelector('.cart-totals');
        
        if (totalsContainer) {
            totalsContainer.innerHTML = `
                <div class="totals-row">
                    <span class="label">Subtotal:</span>
                    <span class="value">$${totals.subtotal.toFixed(2)}</span>
                </div>
                <div class="totals-row">
                    <span class="label">Shipping:</span>
                    <span class="value">${totals.shipping === 0 ? 'Free' : '$' + totals.shipping.toFixed(2)}</span>
                </div>
                <div class="totals-row">
                    <span class="label">Tax:</span>
                    <span class="value">$${totals.tax.toFixed(2)}</span>
                </div>
                <div class="totals-row total">
                    <span class="label">Total:</span>
                    <span class="value">$${totals.total.toFixed(2)}</span>
                </div>
                <div class="checkout-actions">
                    <a href="checkout.html" class="btn btn-primary btn-block">Proceed to Checkout</a>
                </div>
            `;
        }
    }

    // Update cart count in header
    updateCartCount() {
        const totals = this.calculateTotals();
        const cartCountElements = document.querySelectorAll('.cart-count');
        
        cartCountElements.forEach(element => {
            element.textContent = totals.itemCount;
            element.setAttribute('data-count', totals.itemCount);
            
            if (totals.itemCount > 0) {
                element.style.display = 'flex';
            } else {
                element.style.display = 'none';
            }
        });
        
        // Trigger global cart update
        if (window.triggerCartUpdate) {
            window.triggerCartUpdate();
        }
    }

    // Show notification
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <span>${message}</span>
            <button class="close-notification">&times;</button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
        
        // Manual close
        notification.querySelector('.close-notification').addEventListener('click', () => {
            notification.parentNode.removeChild(notification);
        });
    }

    // Load recommended products (placeholder)
    loadRecommendedProducts() {
        // Implementation for loading recommended products
        console.log('Loading recommended products...');
    }
}

// CHECKOUT.JS ESSENTIAL CONTENT
class CheckoutManager {
    constructor() {
        this.cart = this.loadCart();
        this.currentStep = 'payment';
        this.init();
    }
    
    // Helper function to convert price strings to numbers
    parsePrice(price) {
        if (typeof price === 'number') return price;
        if (typeof price === 'string') {
            return parseFloat(price.replace('$', '').replace(',', ''));
        }
        return 0;
    }

    init() {
        console.log('CheckoutManager initializing...', { cartLength: this.cart.length });
        this.renderOrderSummary();
        this.attachEventListeners();
        this.setupFormValidation();
        this.setupCardFormatting();
        this.setupRealTimeValidation();
        this.updateCartCount();
        
        console.log('Initializing payment method display...');
        this.handlePaymentMethodChange();
        
        setTimeout(() => {
            this.initializePayPal();
        }, 500);
        
        this.setupAutoPayPalCheck();
        
        console.log('CheckoutManager initialized successfully');
    }

    // Load cart from localStorage
    loadCart() {
        const savedCart = localStorage.getItem('shopping-cart');
        return savedCart ? JSON.parse(savedCart) : [];
    }

    // Calculate checkout totals
    calculateCheckoutTotals() {
        const subtotal = this.cart.reduce((total, item) => total + (item.price * item.quantity), 0);
        const shipping = subtotal > 50 ? 0 : 9.99;
        const tax = subtotal * 0.08;
        const total = subtotal + shipping + tax;

        return {
            subtotal: subtotal,
            shipping: shipping,
            tax: tax,
            total: total,
            itemCount: this.cart.reduce((total, item) => total + item.quantity, 0)
        };
    }

    // Render order summary
    async renderOrderSummary() {
        const orderSummary = document.querySelector('.order-summary-items');
        const totalsContainer = document.querySelector('.order-totals');
        
        if (!orderSummary) return;

        if (this.cart.length === 0) {
            orderSummary.innerHTML = '<p>Your cart is empty. <a href="products.html">Browse products</a></p>';
            return;
        }

        let summaryHTML = '';
        for (const item of this.cart) {
            const optimizedImageSrc = await preloadImage(item.image);
            
            summaryHTML += `
                <div class="order-item" data-product-id="${item.id}">
                    <div class="order-item-image">
                        <img src="${optimizedImageSrc}" alt="${item.name}" loading="lazy">
                    </div>
                    <div class="order-item-details">
                        <h4>${item.name}</h4>
                        <div class="order-item-price">
                            ${item.originalPrice && item.originalPrice > item.price ? 
                                `<span class="original-price">$${item.originalPrice.toFixed(2)}</span>` : ''
                            }
                            <span class="current-price">$${item.price.toFixed(2)}</span>
                        </div>
                        <div class="order-item-quantity">Qty: ${item.quantity}</div>
                    </div>
                    <div class="order-item-total">
                        $${(item.price * item.quantity).toFixed(2)}
                    </div>
                </div>
            `;
        }

        orderSummary.innerHTML = summaryHTML;
        this.updateOrderTotals();
    }

    // Update order totals
    updateOrderTotals() {
        const totals = this.calculateCheckoutTotals();
        const totalsContainer = document.querySelector('.order-totals');
        
        if (totalsContainer) {
            totalsContainer.innerHTML = `
                <div class="total-row">
                    <span class="label">Subtotal:</span>
                    <span class="value">$${totals.subtotal.toFixed(2)}</span>
                </div>
                <div class="total-row">
                    <span class="label">Shipping:</span>
                    <span class="value">${totals.shipping === 0 ? 'Free' : '$' + totals.shipping.toFixed(2)}</span>
                </div>
                <div class="total-row">
                    <span class="label">Tax:</span>
                    <span class="value">$${totals.tax.toFixed(2)}</span>
                </div>
                <div class="total-row final">
                    <span class="label">Total:</span>
                    <span class="value">$${totals.total.toFixed(2)}</span>
                </div>
            `;
        }
    }

    // Handle payment method change
    handlePaymentMethodChange() {
        const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');
        const cardDetails = document.getElementById('card-details');
        const bankDetails = document.getElementById('bank-details');
        const paypalContainer = document.getElementById('paypal-button-container');
        
        paymentMethods.forEach(method => {
            method.addEventListener('change', () => {
                // Hide all payment details first
                if (cardDetails) cardDetails.style.display = 'none';
                if (bankDetails) bankDetails.style.display = 'none';
                if (paypalContainer) paypalContainer.style.display = 'none';
                
                // Show selected payment method details
                const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked');
                if (selectedMethod) {
                    const methodValue = selectedMethod.value;
                    
                    if (methodValue === 'credit-card' && cardDetails) {
                        cardDetails.style.display = 'block';
                    } else if (methodValue === 'bank-transfer' && bankDetails) {
                        bankDetails.style.display = 'block';
                    } else if (methodValue === 'paypal' && paypalContainer) {
                        paypalContainer.style.display = 'block';
                        this.initializePayPal();
                    }
                }
            });
        });
    }

    // Initialize PayPal
    initializePayPal() {
        if (typeof paypal === 'undefined') {
            console.log('PayPal SDK not loaded yet');
            return;
        }

        const paypalContainer = document.getElementById('paypal-button-container');
        if (!paypalContainer) return;

        // Check if required fields are filled
        if (!this.checkRequiredFields()) {
            paypalContainer.innerHTML = '<p>Please complete all required fields above to enable PayPal.</p>';
            return;
        }

        // Clear container and render PayPal buttons
        paypalContainer.innerHTML = '';
        
        paypal.Buttons({
            createOrder: (data, actions) => {
                const totals = this.calculateCheckoutTotals();
                
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: totals.total.toFixed(2)
                        }
                    }]
                });
            },
            onApprove: (data, actions) => {
                return actions.order.capture().then((details) => {
                    console.log('Payment completed:', details);
                    this.handlePaymentSuccess(details);
                });
            },
            onError: (err) => {
                console.error('PayPal error:', err);
                this.showNotification('Payment error occurred. Please try again.', 'error');
            }
        }).render('#paypal-button-container');
    }

    // Check required fields
    checkRequiredFields() {
        const requiredFields = ['firstName', 'lastName', 'email', 'address', 'city', 'postalCode'];
        
        return requiredFields.every(fieldId => {
            const field = document.getElementById(fieldId);
            return field && field.value.trim() !== '';
        });
    }

    // Setup form validation
    setupFormValidation() {
        const form = document.getElementById('checkout-form');
        if (!form) return;

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            
            if (this.validateForm()) {
                this.processPayment();
            }
        });
    }

    // Validate form
    validateForm() {
        const requiredFields = document.querySelectorAll('[required]');
        let isValid = true;

        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                isValid = false;
                field.classList.add('error');
            } else {
                field.classList.remove('error');
            }
        });

        return isValid;
    }

    // Setup card formatting
    setupCardFormatting() {
        const cardNumber = document.getElementById('cardNumber');
        if (cardNumber) {
            cardNumber.addEventListener('input', (e) => {
                let value = e.target.value.replace(/\D/g, '');
                value = value.substring(0, 16);
                value = value.replace(/(.{4})/g, '$1 ').trim();
                e.target.value = value;
            });
        }
    }

    // Setup real-time validation
    setupRealTimeValidation() {
        const requiredFields = ['firstName', 'lastName', 'email', 'address', 'city', 'postalCode'];
        
        requiredFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                const updatePayPal = () => {
                    this.handlePaymentMethodChange();
                };
                
                field.addEventListener('input', updatePayPal);
                field.addEventListener('blur', updatePayPal);
                field.addEventListener('change', updatePayPal);
            }
        });
    }

    // Setup auto PayPal check
    setupAutoPayPalCheck() {
        setInterval(() => {
            const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
            if (selectedMethod === 'paypal') {
                const paypalContainer = document.getElementById('paypal-button-container');
                if (paypalContainer && paypalContainer.style.display !== 'none') {
                    const hasPayPalButton = paypalContainer.querySelector('.paypal-buttons') !== null;
                    const hasMessage = paypalContainer.innerHTML.includes('Please complete') || paypalContainer.innerHTML.includes('Loading PayPal');
                    
                    if (!hasPayPalButton && !hasMessage) {
                        this.handlePaymentMethodChange();
                    } else if (hasMessage && this.checkRequiredFields()) {
                        this.handlePaymentMethodChange();
                    }
                }
            }
        }, 3000);
    }

    // Attach event listeners
    attachEventListeners() {
        this.handlePaymentMethodChange();
    }

    // Update cart count
    updateCartCount() {
        const totals = this.calculateCheckoutTotals();
        const cartCountElements = document.querySelectorAll('.cart-count');
        
        cartCountElements.forEach(element => {
            element.textContent = totals.itemCount;
            element.setAttribute('data-count', totals.itemCount);
            
            if (totals.itemCount > 0) {
                element.style.display = 'flex';
            } else {
                element.style.display = 'none';
            }
        });
    }

    // Handle payment success
    handlePaymentSuccess(details) {
        console.log('Payment successful:', details);
        localStorage.removeItem('shopping-cart');
        window.location.href = 'thank-you.html';
    }

    // Show notification
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <span>${message}</span>
            <button class="close-notification">&times;</button>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
        
        notification.querySelector('.close-notification').addEventListener('click', () => {
            notification.parentNode.removeChild(notification);
        });
    }
}

// Initialize managers when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    if (typeof window.cartManager === 'undefined') {
        window.cartManager = new CartManager();
    }
    
    // Initialize checkout manager if on checkout page
    if (document.body.classList.contains('checkout-page') || document.querySelector('.checkout-content')) {
        if (typeof window.checkoutManager === 'undefined') {
            window.checkoutManager = new CheckoutManager();
        }
    }
});